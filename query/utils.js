"use strict";function parseSort(r){if(!r)return"";if("string"==typeof r)return` ORDER BY ${r}`;if("object"==typeof r){const e=Object.entries(r);if(e.length){return` ORDER BY ${e.map((r=>{const[e,t]=r;return"number"==typeof t?`${e} ${1===t?"ASC":"DESC"}`:"object"==typeof t?Object.entries(t)?.map((([r,t])=>`${e}.${r} ${1===t?"ASC":"DESC"}`))?.join(", "):""})).filter(Boolean).join(", ")}`}}return""}function parseGroupBy(r){if(!r)return"";if("string"==typeof r)return` GROUP BY ${r}`;if(Array.isArray(r))return` GROUP BY ${r.join(", ")}`;if("object"==typeof r){let e="";return Object.entries(r).forEach((([r,t])=>"extra"===r?e+=(e?", ":"")+(Array.isArray(t)?t.join(", "):t):Array.isArray(t)?e+=(e?", ":"")+t.map((e=>`${r}.${e}`)).join(", "):void 0)),e?` GROUP BY ${e}`:""}return""}function isTableInJoin(r,e){r=r.replace(/(--[^\n]*|\/\*[\s\S]*?\*\/)/g,"").toLowerCase().trim();const t=e.toLowerCase();return new RegExp(`\\bjoin\\s+${t}\\s+on\\b`,"i").test(r)}function parseJoins(r){if(!r||0===r.length)return"";let e="";return r?.forEach((r=>{if("type"in r){const{type:t,on:n,operator:o="=",...i}=r,s=Object?.entries(i||{}).filter((([r])=>"type"!==r&&"on"!==r&&"operator"!==r));if(n&&s?.length){const o=r?.table;e+=` ${t} ${o||s?.[0]?.[0]} ON ${n}`}if(2!==s.length)throw new Error(`❌JOIN requires exactly two tables for a relation, but found ${s.length} or condition not found`);const[[a,p],[f,u]]=s;let l=isTableInJoin(e,a)?f:a;e+=` ${t} ${l} ON ${f}.${u} ${o} ${a}.${p}`}else{const t=Object.entries(r).filter((([r])=>"type"!==r&&"on"!==r&&"operator"!==r));if("on"in r&&t?.length){const{on:n,operator:o="=",...i}=r;e+=` JOIN ${r?.table||t?.[0]?.[0]} ON ${n}`}if(2!==t.length)throw new Error(`❌ JOIN shorthand requires exactly two tables, but found ${t.length} or condition not found`);const[[n,o],[i,s]]=t;let a=isTableInJoin(e,n)?i:n;e+=` JOIN ${a} ON ${i}.${s} = ${n}.${o}`}})),e}function parseColumns(r){if(!r)return"";if("string"==typeof r)return r;if(Array.isArray(r))return r.join(", ");if("object"==typeof r){let e="";return Object.entries(r).forEach((([r,t])=>"extra"===r?e+=(e?", ":"")+(Array.isArray(t)?t.join(", "):t):Array.isArray(t)?e+=(e?", ":"")+t.map((e=>`${r}.${e}`)).join(", "):void 0)),e||""}return""}Object.defineProperty(exports,"__esModule",{value:!0}),exports.parseSort=parseSort,exports.parseGroupBy=parseGroupBy,exports.isTableInJoin=isTableInJoin,exports.parseJoins=parseJoins,exports.parseColumns=parseColumns;